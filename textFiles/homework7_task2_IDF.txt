HomeWork_7::Templates

task_2_1

1- a- מכיוון ששם הפונקציה זהה לשם ה- template, ובקריאה זאת אנו שולחים ל- copy שתי מחרוזות,  ה- compiler יחפש קודם אם ישנה פונקציה התואמת את הארגומנטים אותם העברנו, במידה וקיימת פונקציה כזאת, ה-compiler יקח וישתמש בפונקציה הזאת, במידה ואין פונקציה עם ארגומנטים תואמים לאלו ששלחנו, הוא יחפש האם ישנו template שיכול לשמש אותנו. במידה ומצא, הוא יצור מופע של התבנית על סמך טיפוסי הארגומטים שהעברנו לו.
במקרה זה, פונקציה 1 היא זאת שתיקרא בפועל.

1- b- בהתאם להסבר מהסעיף הקודם, פונקציה 3 היא זאת שתיקרא בפועל.

1- c- בהתאם להסבר מהסעיף הקודם, פונקציה 2 היא זאת שתיקרא בפועל.


task_2_2

a- הבעיה שנוצרת היא שב-template שנתונה ישנו רק משתנה תבניתי אחד, בעוד שאנחנו שולחים 2 ארגומטנטים מ-2 טיפוסים שונים- char + string.
לכן, ה-compiler לא יזהה פונקציה או template שתואמים לארגומנטים ששלחנו ויציג שגיאה.
על מנת לתקן זאת, יש להוסיף ל-template עוד משתנה תבניתי אחד, כך: template <typename T1, typename T2> void copy(T1 a, T2 b);
כך הגדרנו שהתבנית תוכל לקבל שני סוגי טיפוסים שונים- במקרה הזה, גם תו וגם מחרוזת.

b- בסעיף הנ"ל ישנה בעיה דומה כמו בסעיף הקודם, אך כאן נוכל לפתור אותה בדרך שונה.
כיוון שה- compiler יודע להמיר מ-int ל- double ולהפך, נוכל לציין (כאשר קוראים לפונקציה) אחרי ציון שם הפונקציה את סוג הטיפוס אותו אנחנו בוחרים, לדוגמה כך:
copy<double>(5, b);
במקרה זה, ה compiler ידע להתייחס ולהחשיב את המספר 5 כמספר ממשי (5.0), ובכך הוא ימצא את התבנית המתאימה עבורו, שמתעסקת רק עם טיפוס נתונים אחד, שזה double במקרה הזה.


task_2_3

בשביל שסוג הנתונים יתאים לעץ הבינארי שמימשתי, עליו לענות על התנאי הבא:
כיוון שהעץ אותו מימשנו הוא עץ חיפוש בינארי, הפונקציה insert שמימשתי עושה שימוש באופרטורים < > == וכדומה.
על מנת שכל תא בעץ יכיל עצם מטיפוס חתול לדוגמה, עלי לתמוך במחלקה חתול באותם האופרטורים כדי שעם הכנסת התא לעץ החיפוש, נוכל לערוך השוואה מבחינת מי נחשב לגדול/קטן יותר (לדוגמה ניתן להחליט שגודל החתול יקבע על פי גילו). ובכך לא נקבל שגיאות.
עבור טיפוסים כמו int, double, string, char, מועמסים כבר האופרטורים > < == וכדומה, ולכן לא ניתקל בבעיה. אך יש לוודא שבמחלקת הטיפוס בו אנחנו משתמשים, יש העמסה של האופרטורים הנ"ל בהתאם לטיפוס עצמו.
